{
	"info": {
		"_postman_id": "5f7f0dfa-4501-4021-88eb-b756bd77db76",
		"name": "HW3_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var resp_json = pm.response.json();\r",
							"\r",
							"\r",
							"pm.environment.set(\"auth_token\", pm.response.json().token);\r",
							"console.log(pm.response.json().token);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "tasha",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//2) Проверка структуры json в ответе\r",
							"var scheme = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"           {\r",
							"              \"type\": \"string\"\r",
							"           },\r",
							"           {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"           }\r",
							"         ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Schema is valid\", function(){\r",
							" var isValidScheme = tv4.validate(jsonData, scheme, true, true);\r",
							"    pm.expect(isValidScheme).to.be.true;\r",
							"});\r",
							"\r",
							"var req_data = JSON.parse(request.data);\r",
							"\r",
							"//3)тесты по проверке правильности результата перемножения на коэффициент\r",
							"var coeff = (jsonData.qa_salary_after_6_months)/(req_data.salary);\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req_data.salary*coeff)\r",
							"    });\r",
							"\r",
							"var coeff1 = (jsonData.qa_salary_after_12_months)/(req_data.salary);\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req_data.salary*coeff1)\r",
							"    });\r",
							"\r",
							" var coeff2 = (jsonData.person.u_salary_1_5_year)/(req_data.salary);\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year).to.eql(req_data.salary*coeff2)\r",
							"    });   \r",
							"\r",
							"//4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user\r",
							"pm.environment.set(\"u_salary_1_5_year\", jsonData.person.u_salary_1_5_year);\r",
							"\r",
							"var reqObj = {\r",
							"    url: 'http://162.55.220.72:5005/get_test_user',\r",
							"    method: 'POST',\r",
							"    header: {'content-type': 'application/json'},\r",
							"    body: {\r",
							"        mode: \"formdata\",\r",
							"        formdata: [\r",
							"            {key :\"age\", value : pm.environment.get('age')},\r",
							"    {key : \"salary\", value : pm.environment.get('u_salary_1_5_year')},\r",
							"    {key : \"name\", value : pm.environment.get('name')},\r",
							"    {key : \"auth_token\", value : pm.environment.get('auth_token')}]\r",
							"          } \r",
							"    };\r",
							"\r",
							"pm.sendRequest(reqObj, function (err, res) {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"age\" : {{age}},\r\n    \"salary\" : {{salary}},\r\n    \"name\" : \"{{name}}\",\r\n    \"auth_token\" : \"{{auth_token}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData.salary);\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var scheme = {\r",
							"     \"type\": \"object\",\r",
							"     \"required\": [\"age\", \"name\", \"salary\"],\r",
							"  \"properties\": {\r",
							"    \"age\": {\"type\": \"integer\"},\r",
							"    \"name\": {\"type\": \"string\"},\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\"type\": \"integer\"},\r",
							"        {\"type\": \"string\"},\r",
							"        {\"type\": \"string\"}\r",
							"      ]\r",
							"    }\r",
							"  } \r",
							"};\r",
							"\r",
							"pm.test(\"Schema is valid\", function(){\r",
							" var isValidScheme = tv4.validate(jsonData, scheme, true, true);\r",
							"    pm.expect(isValidScheme).to.be.true;\r",
							"});\r",
							"\r",
							"//3)тесты по проверке правильности результата перемножения на коэффициент\r",
							"\r",
							"var coeff = (+jsonData.salary[1])/(jsonData.salary[0]);\r",
							"pm.test(\"salary*2\", function () {\r",
							"    pm.expect(+jsonData.salary[1]).to.eql(jsonData.salary[0]*coeff)\r",
							"    });\r",
							"\r",
							"var coeff1 = (+jsonData.salary[2])/(jsonData.salary[0]);\r",
							"pm.test(\"salary*3\", function () {\r",
							"    pm.expect(+jsonData.salary[2]).to.eql(jsonData.salary[0]*coeff1)\r",
							"    });\r",
							"\r",
							"//4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"pm.test(\"salary[2]>salary[1]\", function() {\r",
							"    pm.expect(+jsonData.salary[2]).to.be.above(+jsonData.salary[1])\r",
							"});\r",
							"pm.test(\"salary[2]>salary[0]\", function() {\r",
							"    pm.expect(+jsonData.salary[2]).to.be.above(+jsonData.salary[0])\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://162.55.220.72:5005/new_data",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200.\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var req_dat=request.data;\r",
							"var scheme = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"age\", \"daily_food\", \"daily_sleep\", \"name\"],\r",
							"    \"properties\":{\r",
							"        \"age\": {\"type\": \"integer\"},\r",
							"        \"daily_food\": {\"type\": \"number\"},\r",
							"        \"daily_sleep\": {\"type\": \"number\"},\r",
							"        \"name\": {\"type\": \"string\"}\r",
							"    }\r",
							"};\r",
							"pm.test(\"Schema is valid\", function(){\r",
							" var isValidScheme = tv4.validate(jsonData, scheme, true, true);\r",
							"    pm.expect(isValidScheme).to.be.true;\r",
							"});\r",
							"\r",
							"//3)тесты по проверке правильности результата перемножения на коэффициент\r",
							"\r",
							"var coeff = (jsonData.daily_food)/(req_dat.weight);\r",
							"pm.test(\"weight*0.012\", function () {\r",
							"    pm.expect(jsonData.daily_food).to.eql(req_dat.weight*coeff)\r",
							"    });\r",
							"\r",
							"var coeff1 = (jsonData.daily_sleep)/(req_dat.weight);\r",
							"pm.test(\"weight*2.5\", function () {\r",
							"    pm.expect(jsonData.daily_sleep).to.eql(req_dat.weight*coeff1)\r",
							"    });\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "49",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/test_pet_info",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"test_pet_info"
					],
					"query": [
						{
							"key": "age",
							"value": "{{age}}",
							"disabled": true
						},
						{
							"key": "weight",
							"value": "50",
							"disabled": true
						},
						{
							"key": "name",
							"value": "{{name}}",
							"disabled": true
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200.\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var req_dat=request.data;\r",
							"var scheme = {\r",
							"     \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\"type\": \"string\"},\r",
							"    \"family\": {\"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\"type\": \"string\"},\r",
							"                {\"type\": \"integer\"}\r",
							"              ]\r",
							"            },\r",
							"            {\"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\"type\": \"string\"},\r",
							"                {\"type\": \"integer\"}\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\"type\": \"integer\"}\r",
							"      },\r",
							"      \"required\": [\"children\", \"u_salary_1_5_year\"]\r",
							"    },\r",
							"    \"name\": {\"type\": \"string\"},\r",
							"    \"salary\": {\"type\": \"integer\"}\r",
							"  },\r",
							"  \"required\": [\"age\",\"family\",\"name\",\"salary\"]\r",
							"};\r",
							"pm.test(\"Schema is valid\", function(){\r",
							" var isValidScheme = tv4.validate(jsonData, scheme, true, true);\r",
							"    pm.expect(isValidScheme).to.be.true;\r",
							"});\r",
							"\r",
							"//3) Проверить что значение поля name = значению переменной name из окружения.\r",
							"pm.test(\"Name\", function(){\r",
							"    pm.expect(jsonData.name).to.be.eql(pm.environment.get(\"name\"))\r",
							"});\r",
							"\r",
							"//4) Проверить что значение поля age в ответе соответсвует отправленному в запросе значению поля age.\r",
							"pm.test(\"Age\", function(){\r",
							"    pm.expect(jsonData.name).to.be.eql(req_dat.name)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					],
					"query": [
						{
							"key": "age",
							"value": "{{age}}",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"disabled": true
						},
						{
							"key": "name",
							"value": "{{name}}",
							"disabled": true
						},
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"var randomElement = jsonData[_.random(jsonData.length-1)];\r",
							"console.log(randomElement);\r",
							"console.log(randomElement.Cur_ID);\r",
							"pm.environment.set(\"Cur_ID\", randomElement.Cur_ID);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/currency",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200.\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var jsonData = pm.response.json();\r",
							"var req_dat=request.data;\r",
							"var scheme = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"      \"Cur_Abbreviation\": {\"type\": \"string\"},\r",
							"    \"Cur_ID\": {\"type\": \"integer\"},\r",
							"    \"Cur_Name\": {\"type\": \"string\"},\r",
							"    \"Cur_OfficialRate\": {\"type\": \"number\"},\r",
							"    \"Cur_Scale\": {\"type\": \"integer\"},\r",
							"    \"Date\": {\"type\": \"string\"}\r",
							"  },\r",
							"  \"required\": [\"Cur_Abbreviation\", \"Cur_ID\", \"Cur_Name\", \"Cur_OfficialRate\", \"Cur_Scale\", \"Date\"]\r",
							"};\r",
							"\r",
							"pm.test(\"Schema is valid\", function(){\r",
							" var isValidScheme = tv4.validate(jsonData, scheme, true, true);\r",
							"    pm.expect(isValidScheme).to.be.true;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/curr_byn",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"curr_byn"
					],
					"query": [
						{
							"key": "auth_token",
							"value": "{{auth_token}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}